<%= breadcrumb %>
<style>
    svg {
        box-sizing: border-box;
        border: 1px solid rgb(212, 212, 212);
    }

    circle {
        stroke: rgb(95, 176, 228);
        stroke-width: 2;
        fill: rgba(205, 246, 255, 0.3);
    }

    rect {
        stroke: rgb(95, 176, 228);
        stroke-width: 2;
        fill: rgba(205, 246, 255, 0.3);
    }

    line {
        stroke: rgb(212, 212, 212);
        stroke-width: 1px;
        shape-rendering: crispEdges;
    }
</style>

<div class="grid" style="background-color: white;">
</div>

<%= javascript_include_tag "thecore_floorplan_designer/d3.v3.min.js"%>
<%# <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script> %>
<script>
    /*
    $(".grid").width()/960*20=rw
    */
    var width = $(".grid").width(),
        height = 500,
        resolution = width / 960 * 20, // 20,
        r = width / 960 * 15; // 15;

    var points = d3.range(10).map(function () {
        return {
            x: round(Math.random() * width, resolution),
            y: round(Math.random() * height, resolution)
        };
    });

    var drag = d3.behavior.drag()
        .origin(function (d) {
            return d;
        })
        .on('drag', dragged);

    var svg = d3.select('.grid').append('svg')
        .attr('width', width)
        .attr('height', height);

    svg.selectAll('.vertical')
        .data(d3.range(1, width / resolution))
        .enter().append('line')
        .attr('class', 'vertical')
        .attr('x1', function (d) {
            return d * resolution;
        })
        .attr('y1', 0)
        .attr('x2', function (d) {
            return d * resolution;
        })
        .attr('y2', height);

    svg.selectAll('.horizontal')
        .data(d3.range(1, height / resolution))
        .enter().append('line')
        .attr('class', 'horizontal')
        .attr('x1', 0)
        .attr('y1', function (d) {
            return d * resolution;
        })
        .attr('x2', width)
        .attr('y2', function (d) {
            return d * resolution;
        });

    // var circles = svg.selectAll('circle')
    //     .data(points)
    //     .enter().append('circle')
    //     .attr('cx', function (d) {
    //         return d.x;
    //     })
    //     .attr('cy', function (d) {
    //         return d.y;
    //     })
    //     .attr('r', r)
    //     .call(drag);

    let rect = svg.selectAll('circle')
        .data(points)
        .enter().append("rect")
        .attrs({
            "x": 480,
            "y": 141,
            "width": 40,
            "height": 30
        });
        // .style("fill", "blue");

    function dragged(d) {
        var x = d3.event.x,
            y = d3.event.y,
            gridX = round(Math.max(r, Math.min(width - r, x)), resolution),
            gridY = round(Math.max(r, Math.min(height - r, y)), resolution);

        d3.select(this).attr('cx', d.x = gridX).attr('cy', d.y = gridY);
    }

    function round(p, n) {
        return p % n < n / 2 ? p - (p % n) : p + n - (p % n);
    }
</script>
<%# <div class="well">
    <select id="item-size">
        <option value="">1x1</option>
        <option value="height2">1x2</option>
        <option value="width2">2x1</option>
        <option value="height3">1x3</option>
        <option value="width3">3x1</option>
        <option value="height4">1x4</option>
        <option value="width4">4x1</option>
        <option value="width2 height2">2x2</option>
        <option value="width3 height3">3x3</option>
        <option value="width4 height4">4x4</option>
    </select>
    <button id="add-item">
        <i class="fa fa-plus-square"></i>
    </button>
</div>

<div class="hidden sample-grid-item">
    <div class="grid-item">
        <div class="grid-item-delete pull-right" style="margin-right: 3%;">
            <i class="fa fa-window-close"></i>
        </div>
        <div class="grid-item-content" style="width:100%;height:100%;">
            &nbsp;
        </div>
    </div>
</div>
 %>

<%# 
INTEGRATE NODE DEPENDENCIES INTO RAILS:
https://g3ortega.com/rails/2017/05/30/rails-5-1-and-forward-yarn-on-rails.html
https://phraseapp.com/blog/posts/sharing-assets-between-rails/
https://github.com/rails/webpacker/blob/master/docs/engines.md
CDN:
<script src="https://unpkg.com/draggabilly@2/dist/draggabilly.pkgd.min.js"></script>
<script src="https://unpkg.com/packery@2.1/dist/packery.pkgd.min.js"></script> 
%>

<%#
https://github.com/rails/webpacker/issues/348
https://github.com/rails/webpacker/blob/master/docs/engines.md
%>
<%# https://codepen.io/desandro/pen/PZrXVv %>
<%# <%= javascript_include_tag "thecore_floorplan_designer/draggabilly.pkgd.min.js" %>
<%# <%= javascript_include_tag "thecore_floorplan_designer/packery.pkgd.min.js"%>
<%# <style>
    * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }

    html { 
        overflow-y: scroll;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: sans-serif;
    }

    .grid {
        background: #FDD;
        background: hsla(45, 100%, 144%, 0.2);
        max-width: 100%;
    }

    /* clearfix */
    .grid:after {
        content: ' ';
        display: block;
        clear: both;
    }

    .grid-item {
        width: 20%;
        height: 144px;
        float: left;
        background: #C09;
        border: 2px solid #333;
        border-color: hsla(0, 0%, 0%, 0.3);
    }

    .grid-item:hover {
        border-color: white;
        cursor: move;
    }

    .grid-item.width2 {
        width: 40%;
        background: #9C0;
    }

    .grid-item.height2 {
        height: 288px;
        background: #0C9;
    }
    .grid-item.width3 {
        width: 60%;
        background: #9C0;
    }

    .grid-item.height3 {
        height: 432px;
        background: #0C9;
    }

    .grid-item.height4 {
        height: 576px;
        background: #C90;
    }

    .grid-item.width4 {
        width: 80%;
        background: #90C;
    }

    .grid-item.height5 {
        height: 100%;
        background: #C90;
    }

    .grid-item.width5 {
        width: 100%;
        background: #90C;
    }

    .grid-item.is-dragging,
    .grid-item.is-positioning-post-drag {
        border-color: white;
        background: #09F;
        z-index: 2;
    }
</style>

<script>
    // initialize Packery
    var $grid = $('.grid').packery({
        itemSelector: '.grid-item',
        percentPosition: true,
        // columnWidth helps with drop positioning
        // columnWidth: 144,
        // rowHeight: 144
    });
    $grid.find('.grid-item').each(makeEachDraggable);

    function makeEachDraggable(i, itemElem) {
        // make element draggable with Draggabilly
        var draggie = new Draggabilly(itemElem);
        // bind Draggabilly events to Packery
        $grid.packery('bindDraggabillyEvents', draggie);
    }
    $grid.on('click', '.grid-item-delete', function (event) {
        // remove clicked element
        $grid.packery('remove', event.currentTarget.parentElement.parentElement)
        // shiftLayout remaining item elements
        //.packery('shiftLayout');
    });
    let itemId = 0;
    // const baseWidth = 144;
    // const baseHeight = 144;
    // const baseColor = 'gray';
    // add more items
    $('#add-item').on('click', function () {
        // create new item elements
        // prepend items to grid
        const baseItem = $(".sample-grid-item .grid-item");
        let item = baseItem.clone();

        const sizeClass = $( "#item-size" ).val();
        item.addClass(sizeClass);

        $grid.append(item)
            // add and lay out newly prepended items
            .packery('appended', item);
        item.each( makeEachDraggable );
    });
</script> %>